//uniform float4x4 worldViewProjMatrix;
uniform sampler2D oculusTexture;

float2 EyeToSourceUVScale, EyeToSourceUVOffset;
float4x4 EyeRotationStart, EyeRotationEnd;

float2 TimewarpTexCoord(float2 TexCoord, float4x4 rotMat)
{
	// Vertex inputs are in TanEyeAngle space for the R,G,B channels (i.e. after chromatic
	// aberration and distortion). These are now "real world" vectors in direction (x,y,1)
	// relative to the eye of the HMD.	Apply the 3x3 timewarp rotation to these vectors.
	float3 transformed = float3(mul(rotMat, float4(TexCoord.xy, 1, 1)).xyz);
	// Project them back onto the Z=1 plane of the rendered images
	float2 flattened = (transformed.xy / transformed.z);
	// Scale them into ([0,0.5],[0,1]) or ([0.5,0],[0,1]) UV lookup space (depending on eye)
	return(EyeToSourceUVScale * flattened + EyeToSourceUVOffset);
}

void mainVS(
    in float3 pos 			: POSITION,
	in float2 TexCoord0 	: TEXCOORD0,
	in float2 TexCoord1 	: TEXCOORD1,
	in float2 TexCoord2 	: TEXCOORD2,
	in float  Vignette		: TEXCOORD3,
    out float4 oPos 		: POSITION,
	out float2 oTexCoord0 	: TEXCOORD0,
	out float2 oTexCoord1 	: TEXCOORD1,
	out float2 oTexCoord2 	: TEXCOORD2,
	out float  oVignette	: TEXCOORD3
    )
{
	//oPos = mul(worldViewProjMatrix, float4(pos.xy, 0, 1));
	oPos = float4(pos.xy, 0.5, 1);

	float4x4 lerpedEyeRot = lerp(EyeRotationStart, EyeRotationEnd, pos.z);
	oTexCoord0 = (EyeToSourceUVScale * TexCoord0 + EyeToSourceUVOffset); //TimewarpTexCoord(TexCoord0, lerpedEyeRot);
	oTexCoord1 = (EyeToSourceUVScale * TexCoord1 + EyeToSourceUVOffset); //oTexCoord1 = TimewarpTexCoord(TexCoord1, lerpedEyeRot);
	oTexCoord2 = (EyeToSourceUVScale * TexCoord2 + EyeToSourceUVOffset); //oTexCoord2 = TimewarpTexCoord(TexCoord2, lerpedEyeRot);
	
	oVignette = Vignette;
}

void mainPS(
	in float2 TexCoord0 	: TEXCOORD0,
	in float2 TexCoord1 	: TEXCOORD1,
	in float2 TexCoord2 	: TEXCOORD2,
	in float  Vignette		: TEXCOORD3,
    out float4 oCol: COLOR
    )
{
	float R = tex2D(oculusTexture, TexCoord0.xy).r;
	float G = tex2D(oculusTexture, TexCoord1.xy).g;
	float B = tex2D(oculusTexture, TexCoord2.xy).b;
    oCol = Vignette * float4(R, G, B, 1);
}
